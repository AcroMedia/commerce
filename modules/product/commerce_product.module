<?php

/**
 * @file
 * Defines the core Commerce product entity, including the entity itself, the
 * bundle definitions (product types), and various API functions to manage
 * products and interact with them through forms and autocompletes.
 */

use Drupal\commerce_product\Entity\CommerceProductType;
use Drupal\Core\Entity\EntityInterface;
use Drupal\commerce_product\CommerceProductInterface;
use Drupal\Core\Url;
use Drupal\Core\Language\LanguageInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_entity_operation().
 *
 * Add devel link if this entity type is /commerce_product[_type]/.
 */
function commerce_product_entity_operation(EntityInterface $entity) {
  $operations = array();
  if (!\Drupal::moduleHandler()->moduleExists('devel')) {
    return $operations;
  }

  $entity_routes = array(
    'commerce_product' => 'entity.commerce_product.devel',
    'commerce_product_type' => 'entity.commerce_product_type.devel',
  );

  $entity_type_id = $entity->getEntityTypeId();
  if (\Drupal::currentUser()->hasPermission('access devel information') && in_array($entity_type_id, array_keys($entity_routes))) {
    $operations['devel'] = array(
      'route_name' => $entity_routes[$entity_type_id],
      'route_parameters' => array($entity_type_id => $entity->id()),
      'title' => t('Devel'),
      'weight' => 15,
    );
  }

  return $operations;
}

/**
 * Entity URI callback.
 *
 * @param \Drupal\commerce_product\CommerceProductInterface $product
 *   A product entity.
 *
 * @return \Drupal\core\Url
 *   A Url object that provides a URL to the view page for $product.
 */
function commerce_product_uri(CommerceProductInterface $product) {
  return new Url('entity.commerce_product.view', array(
    'commerce_product' => $product->id(),
  ));
}

/**
 * Implements hook_theme().
 */
function commerce_product_theme() {
  return array(
    'commerce_product_add_list' => array(
      'variables' => array('content' => NULL),
      'file' => 'commerce_product.pages.inc',
      'template' => 'commerce-product-add-list',
    ),
  );
}

/**
 * Adds the default body field to a product type.
 *
 * @param string $product_type_id
 *   Id of the Commerce Product type.
 * @param string $label
 *   (optional) The label for the body instance. Defaults to 'Body'.
 *
 * @return array
 *   Body field instance.
 */
function commerce_product_add_body_field($product_type_id, $label = 'Body') {
  // Add or remove the body field, as needed.
  $field_storage = FieldStorageConfig::loadByName('commerce_product', 'body');
  $instance = FieldConfig::loadByName('commerce_product', $product_type_id, 'body');
  if (empty($field_storage)) {
    $field_storage = entity_create('field_storage_config', array(
      'field_name' => 'body',
      'entity_type' => 'commerce_product',
      'type' => 'text_with_summary',
    ));
    $field_storage->save();
  }
  if (empty($instance)) {
    $instance = entity_create('field_config', array(
      'field_storage' => $field_storage,
      'bundle' => $product_type_id,
      'label' => $label,
      'settings' => array('display_summary' => FALSE),
    ));
    $instance->save();

    // Assign widget settings for the 'default' form mode.
    entity_get_form_display('commerce_product', $product_type_id, 'default')
      ->setComponent('body', array(
        'type' => 'text_textarea_with_summary',
        'weight' => 1,
      ))
      ->save();

    // Assign display settings for 'default' view mode.
    entity_get_display('commerce_product', $product_type_id, 'default')
      ->setComponent('body', array(
        'label' => 'hidden',
        'type' => 'text_default',
      ))
      ->save();
  }

  return $instance;
}
